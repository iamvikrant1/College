/*
Represent a given graph using adjacency matrix /adjacency list and find the shortest path using
Dijkstra's algorithm (single source all destination).
*/
#include<iostream>
using namespace std;
#include<stdlib.h>
#define INFINITY 10000
 
void accept(int *a,int n)
{
    int i,j,temp;    
    for(i=0 ; i<n ; i++)
    {
        for(j=i ; j<n ; j++)
        {
            if(i==j)
            	*(a+i*n+j)=0;
            else
            {    
                cout<<"\n\tWeight of edge ["<<i<<"]["<<j<<"]>>";
                cin>>temp;
                *(a+i*n+j)=*(a+j*n+i)=temp;
        	}
        }
    }
}
void display(int *a,int n)
{
    int i,j;
    for(i=0 ; i<n ; i++)
    {
        cout<<"\n\t"<<i<<"]";
        for(j=0 ; j<n ; j++)
            cout<<"\t"<<*(a+i*n+j);
    }
}
 
void dijkstra(int *a,int n)
{
	int visit[n],dist[n],prev[n],cost[n][n],d[n];
	int i,j,k,count,mindist,nxtnode,startvertex;
	
	cout<<"\n\tEnter the STARTING VERTEX of Graph : ";
	cin>>startvertex;
	
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(*(a+i*n+j)==0)
				cost[i][j]=INFINITY;
			else 
				cost[i][j]=*(a+i*n+j);
		}
	}
	
	for(i=0;i<n;i++)
	{
		dist[i]=cost[startvertex][i];
		prev[i]=startvertex;
		visit[i]=0;
	}	
	
	dist[startvertex]=0;
	visit[startvertex]=1;
	count=1;
	
	while(count<n-1)
	{
		mindist=INFINITY;
		for(i=0;i<n;i++)
		{
			if(dist[i]<mindist && !visit[i])
			{
				mindist=dist[i];
				nxtnode=i;
			}
		}
	
		visit[nxtnode]=1;
	
		for(i=0;i<n;i++)
		{
			if(!visit[i])
			{
				if(mindist+cost[nxtnode][i] < dist[i])
				{
					dist[i]=mindist+cost[nxtnode][i];
					prev[i]=nxtnode;
				}
			}
		}
		count++;
	}
	
	for(i=0;i<n;i++)
	{
		if(i!=startvertex)
		{
			cout<<"\n\n\tDistance of node "<<i<<" from node "<<startvertex<<" is : "<<dist[i];
			cout<<"\n\tIts path is : "<<i;
			j=i;
			do
			{
				j=prev[j];
				cout<<"<-"<<j;
			}while(j!=startvertex);
		}
	}
}
 
int main()
{
    int *a,n,flag,choice;
    
    cout<<"\n\t\t**Shortest path using Dijkstra's alorithm**\n";
    cout<<"\n\tEnter the No.of Vertices : ";
    cin>>n;
    a=new int[n*n];
    accept(a,n);
    
    do
    {
		cout<<"\n--------------------MENU--------------------";
		cout<<"\n\t1:Display Adjacency matrix\n\t2:Display Shortest paths\n\t0:Exit : ";
		cin>>choice;
		
		switch(choice)
		{
		    case 1:
		        display(a,n);
		        break;
		    case 2:
		    dijkstra(a,n);
		        break;
		}
    }while(choice!=0);
    
    cout<<"\n";
    return 0;    
}
 
/*
						**OUTPUT**
	
			**Shortest path using Dijkstra's alorithm**
 
	Enter the No.of Vertices : 5
 
	Weight of edge [0][1]>>10
 
	Weight of edge [0][2]>>0
 
	Weight of edge [0][3]>>30
 
	Weight of edge [0][4]>>100
 
	Weight of edge [1][2]>>50
 
	Weight of edge [1][3]>>0
 
	Weight of edge [1][4]>>0
 
	Weight of edge [2][3]>>20
 
	Weight of edge [2][4]>>10
 
	Weight of edge [3][4]>>60
 
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Display Shortest paths
	0:Exit : 1
 
	0]	0	10	0	30	100
	1]	10	0	50	0	0
	2]	0	50	0	20	10
	3]	30	0	20	0	60
	4]	100	0	10	60	0
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Display Shortest paths
	0:Exit : 2
 
	Enter the STARTING VERTEX of Graph : 0
 
 
	Distance of node 1 from node 0 is : 10
	Its path is : 1<-0
 
	Distance of node 2 from node 0 is : 50
	Its path is : 2<-3<-0
 
	Distance of node 3 from node 0 is : 30
	Its path is : 3<-0
 
	Distance of node 4 from node 0 is : 60
	Its path is : 4<-2<-3<-0
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Display Shortest paths
	0:Exit : 0
 
*/
 
 