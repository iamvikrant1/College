/*
Represent any real world graph using adjacency list /adjacency matrix find minimum spanning
tree using Kruskalâ€™s algorithm.
*/
#include<iostream>
using namespace std;
#include<stdlib.h>
 
void accept(int *a,int n)
{
    int i,j,temp;    
    for(i=0 ; i<n ; i++)
    {
        for(j=i ; j<n ; j++)
        {
            if(i==j)
            	*(a+i*n+j)=0;
            else
            {    
                cout<<"\n\tWeight of edge ["<<i<<"]["<<j<<"]>>";
                cin>>temp;
                *(a+i*n+j)=*(a+j*n+i)=temp;
        	}
        }
    }
}
 
void display(int *a,int n)
{
    int i,j;
    for(i=0 ; i<n ; i++)
    {
        cout<<"\n\t"<<i<<"]";
        for(j=0 ; j<n ; j++)
            cout<<"\t"<<*(a+i*n+j);
    }
}
 
void spantree(int *a,int n)
{
    int i,j,flag[3]={0,0,0},totaledge=n*(n-1)/2,sflag,temp,total;
    int *s,edge=0,check1,check2;
    
    s=new int[totaledge*3];
    while(edge < totaledge)
    {
      	flag[2]=36000;
   	  	for(i=0 ; i<n ; i++)
      	{
    		for(j=i+1 ; j<n ; j++)
    		{
    			temp=0; sflag=0;
    			if(*(a+i*n+j) < flag[2] && *(a+i*n+j)!=0)
    			{
    				while(temp!=edge)
    				{
    					if(*(s+temp*3+0)==i && *(s+temp*3+1)==j && *(s+temp*3+2)==*(a+i*n+j))
                            sflag=1;    					    
    					temp++;
    				}
    				if(sflag!=1)
    				{
    				    flag[0]=i;
    				    flag[1]=j;
    				    flag[2]=*(a+i*n+j);
    			    }
     		    }
     		}
     		
      	}
		*(s+edge*3+0)=flag[0];
	 	*(s+edge*3+1)=flag[1];
	   	*(s+edge*3+2)=flag[2];
    	edge++;
	}
	
	cout<<"\n\tStart pt.   End pt.   Weight";
	total=0;
	for(i=0 ; i<totaledge ; i++)
	{
    	check1=0; check2=0;
	    for(j=0 ; j<i ; j++)
	    {
	        if(*(s+i*3+0)==*(s+j*3+0) || *(s+i*3+0)==*(s+j*3+1))
	            check1++;
	            
	        if(*(s+i*3+1)==*(s+j*3+0) || *(s+i*3+1)==*(s+j*3+1))
	            check2++;
	    }
	    
	    if(check1<2 && check2<2 || check1==0 || check2==0)
	    {
	        cout<<"\n\t"<<*(s+i*3+0)<<"\t\t"<<*(s+i*3+1)<<"\t"<<*(s+i*3+2);
	        total+=*(s+i*3+2);
	    }
	}
	cout<<"\n\n\tWeight of Min-Spanning Tree is : "<<total;
}
 
 
 
 
int main()
{
    int *a,n,flag,choice;
    
    cout<<"\n\t\t**Minimum Spanning Tree using Kruskal's alorithm**\n";
    cout<<"\n\tEnter the No.of Vertices : ";
    cin>>n;
    a=new int[n*n];
    accept(a,n);
    
    do
    {
		cout<<"\n--------------------MENU--------------------";
		cout<<"\n\t1:Display Adjacency matrix\n\t2:Min. Spanning Tree\n\t0:Exit : ";
		cin>>choice;
		
		switch(choice)
		{
		    case 1:
		        display(a,n);
		        break;
		    case 2:
		        spantree(a,n);
		        break;
		}
    }while(choice!=0);
    
    cout<<"\n";
    return 0;    
}
 
/*
					**OUTPUT**
 
		**Minimum Spanning Tree using Kruskal's alorithm**
 
	Enter the No.of Vertices : 4
 
	Weight of edge [0][1]>>3
 
	Weight of edge [0][2]>>4
 
	Weight of edge [0][3]>>2
 
	Weight of edge [1][2]>>1
 
	Weight of edge [1][3]>>4
 
	Weight of edge [2][3]>>0
 
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Min. Spanning Tree
	0:Exit : 1
 
	0]	0	3	4	2
	1]	3	0	1	4
	2]	4	1	0	0
	3]	2	4	0	0
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Min. Spanning Tree
	0:Exit : 2
 
	Start pt.   End pt.   Weight
	1		2	1
	0		3	2
	0		1	3
 
	Weight of Min-Spanning Tree is : 6
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Min. Spanning Tree
	0:Exit : 0
 
administrator@IT-PL1-PC02:~$ g++ dsf7.cpp
administrator@IT-PL1-PC02:~$ ./a.out
 
		**Minimum Spanning Tree using Kruskal's alorithm**
 
	Enter the No.of Vertices : 8
 
	Weight of edge [0][1]>>2
 
	Weight of edge [0][2]>>0
 
	Weight of edge [0][3]>>3 
 
	Weight of edge [0][4]>>0
 
	Weight of edge [0][5]>>1
 
	Weight of edge [0][6]>>0
 
	Weight of edge [0][7]>>0
 
	Weight of edge [1][2]>>2
 
	Weight of edge [1][3]>>2
 
	Weight of edge [1][4]>>4
 
	Weight of edge [1][5]>>0
 
	Weight of edge [1][6]>>0
 
	Weight of edge [1][7]>>0
 
	Weight of edge [2][3]>>0
 
	Weight of edge [2][4]>>5
 
	Weight of edge [2][5]>>0
 
	Weight of edge [2][6]>>0
 
	Weight of edge [2][7]>>1
 
	Weight of edge [3][4]>>4
 
	Weight of edge [3][5]>>3
 
	Weight of edge [3][6]>>0
 
	Weight of edge [3][7]>>0
 
	Weight of edge [4][5]>>3
 
	Weight of edge [4][6]>>7
 
	Weight of edge [4][7]>>6
 
	Weight of edge [5][6]>>5
 
	Weight of edge [5][7]>>0
 
	Weight of edge [6][7]>>0
 
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Min. Spanning Tree
	0:Exit : 1
 
	0]	0	2	0	3	0	1	0	0
	1]	2	0	2	2	4	0	0	0
	2]	0	2	0	0	5	0	0	1
	3]	3	2	0	0	4	3	0	0
	4]	0	4	5	4	0	3	7	6
	5]	1	0	0	3	3	0	5	0
	6]	0	0	0	0	7	5	0	0
	7]	0	0	1	0	6	0	0	0
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Min. Spanning Tree
	0:Exit : 2
 
	Start pt.   End pt.   Weight
	0		5	1
	2		7	1
	0		1	2
	1		2	2
	1		3	2
	4		5	3
	5		6	5
 
	Weight of Min-Spanning Tree is : 16
--------------------MENU--------------------
	1:Display Adjacency matrix
	2:Min. Spanning Tree
	0:Exit : 0
 
*/
 
 
 